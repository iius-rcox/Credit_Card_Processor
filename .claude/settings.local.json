{
  "permissions": {
    "allow": [
      "Bash(xcopy:*)",
      "Bash(robocopy:*)",
      "Bash(mkdir:*)",
      "Bash(timeout:*)",
      "Bash(npm install)",
      "Bash(npm run build:*)",
      "Bash(npm run dev:*)",
      "Bash(npm run lint:*)",
      "Bash(npm run format:check:*)",
      "Bash(npm run format:*)",
      "mcp__ide__getDiagnostics",
      "Bash(docker:*)",
      "Bash(chmod:*)",
      "Bash(source:*)",
      "Bash(alembic revision:*)",
      "Bash(PYTHONPATH=/opt/homebrew/lib/python3.13/site-packages:/Users/rogercox/Library/Python/3.9/lib/python/site-packages:. /opt/homebrew/bin/python3 -c \"import pytest; print(''pytest available'')\")",
      "Bash(PYTHONPATH=/opt/homebrew/lib/python3.13/site-packages:/Users/rogercox/Library/Python/3.9/lib/python/site-packages:. /opt/homebrew/bin/python3 test_auth_comprehensive.py)",
      "Bash(PYTHONPATH=/Users/rogercox/Library/Python/3.9/lib/python/site-packages:. python3 test_auth_comprehensive.py)",
      "Bash(uvicorn:*)",
      "Bash(PYTHONPATH=/Users/rogercox/Credit_Card_Processor/backend DEBUG=True uvicorn app.main:app --host 127.0.0.1 --port 8001)",
      "Bash(./venv/bin/python -m pytest tests/test_processing.py -v --tb=short)",
      "Bash(./venv/bin/python test_processing_endpoints.py:*)",
      "Bash(./venv/bin/python:*)",
      "Bash(npx eslint:*)",
      "Bash(ADMIN_USERS=\"testuser1,testuser2,rcox\" python3 -c \"\nimport sys\nimport os\nsys.path.append(os.getcwd())\n\n# Mock pydantic_settings for testing\nclass MockBaseSettings:\n    pass\n\nclass MockField:\n    def __init__(self, **kwargs):\n        pass\n    def __call__(self, **kwargs):\n        return kwargs.get(''default'', '''')\n\n# Simple mock\nimport types\nmock_pydantic_settings = types.ModuleType(''pydantic_settings'')\nmock_pydantic_settings.BaseSettings = MockBaseSettings\nsys.modules[''pydantic_settings''] = mock_pydantic_settings\n\nmock_pydantic = types.ModuleType(''pydantic'')\nmock_pydantic.Field = MockField\nmock_pydantic.field_validator = lambda *args: lambda func: func\nsys.modules[''pydantic''] = mock_pydantic\n\n# Import our config\nfrom app.config import Settings\nsettings = Settings()\n\nprint(''Testing secure configuration with mocked dependencies...'')\nprint(f''Admin users raw: {settings.admin_users_env}'')\nprint(f''Admin users parsed: {settings.admin_users}'')\nprint(f''Admin check for rcox: {settings.is_admin_user(\"\"rcox\"\")}'')\nprint(f''Admin check for TESTUSER1: {settings.is_admin_user(\"\"TESTUSER1\"\")}'')\nprint(f''Admin check for unknown: {settings.is_admin_user(\"\"unknown\"\")}'')\nprint(''Basic configuration logic test successful!'')\n\")",
      "Bash(npm run test:coverage:*)",
      "Bash(npm run test:*)",
      "Bash(cp:*)",
      "Bash(npm install:*)",
      "Bash(npm run:*)",
      "Bash(npm test:*)",
      "Bash(NODE_ENV=test npm test src/components/__tests__/SessionSetup.test.js)",
      "Bash(PYTHONPATH=. python3 -c \"\ntry:\n    from app.api.results import router as results_router\n    print(''✓ Results router import successful'')\n    print(f''  Routes: {len(results_router.routes)} endpoints'')\nexcept Exception as e:\n    print(f''✗ Results router import failed: {e}'')\n\ntry:\n    from app.api.export import router as export_router\n    print(''✓ Export router import successful'') \n    print(f''  Routes: {len(export_router.routes)} endpoints'')\nexcept Exception as e:\n    print(f''✗ Export router import failed: {e}'')\n\")",
      "Bash(SESSION_SECRET_KEY:*)",
      "Bash(export:*)",
      "Bash(npx vitest run:*)",
      "Bash(mv:*)"
    ],
    "deny": [],
    "ask": []
  }
}