# Credit Card Processor - Complete Monitoring Stack
# 
# This compose file adds comprehensive monitoring infrastructure:
# - Prometheus for metrics collection
# - Grafana for visualization and dashboards
# - AlertManager for alert handling
# - Node Exporter for system metrics
# - cAdvisor for container metrics
# - Fluentd for log aggregation

services:
  # Main application services (from docker-compose.prod.yml)
  # Include the main application stack or run with:
  # docker-compose -f docker-compose.prod.yml -f docker-compose.monitoring.yml up

  # Prometheus - Metrics collection and alerting
  prometheus:
    image: prom/prometheus:latest
    container_name: credit-card-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--alertmanager.url=http://alertmanager:9093'
    networks:
      - credit-card-network
      - monitoring-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # AlertManager - Alert routing and notification
  alertmanager:
    image: prom/alertmanager:latest
    container_name: credit-card-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./config/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.advertise-address=0.0.0.0:9093'
    networks:
      - monitoring-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: credit-card-grafana
    ports:
      - "3001:3000"  # Use 3001 to avoid conflict with frontend
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_SERVER_ROOT_URL=http://localhost:3001
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST}:${SMTP_PORT:-587}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
      - GF_SMTP_FROM_ADDRESS=${SMTP_USER}
    networks:
      - monitoring-network
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: credit-card-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.systemd'
      - '--collector.processes'
    networks:
      - monitoring-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: credit-card-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    networks:
      - monitoring-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

  # nginx Exporter - nginx metrics
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: credit-card-nginx-exporter
    ports:
      - "9113:9113"
    command:
      - '-nginx.scrape-uri=http://nginx:8080/nginx_status'
    networks:
      - credit-card-network
      - monitoring-network
    depends_on:
      - nginx
    restart: unless-stopped

  # Fluentd - Log aggregation
  fluentd:
    image: fluent/fluentd:latest
    container_name: credit-card-fluentd
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    volumes:
      - ./config/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/var/log/credit-card-processor:ro
      - fluentd_data:/var/log/fluentd
    networks:
      - monitoring-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

  # Blackbox Exporter - External endpoint monitoring
  blackbox-exporter:
    image: prom/blackbox-exporter:latest
    container_name: credit-card-blackbox-exporter
    ports:
      - "9115:9115"
    volumes:
      - ./config/blackbox.yml:/etc/blackbox_exporter/config.yml:ro
    networks:
      - monitoring-network
    restart: unless-stopped

  # Loki - Log aggregation (alternative to Fluentd)
  # loki:
  #   image: grafana/loki:latest
  #   container_name: credit-card-loki
  #   ports:
  #     - "3100:3100"
  #   volumes:
  #     - ./config/loki.yml:/etc/loki/local-config.yaml:ro
  #     - loki_data:/loki
  #   command: -config.file=/etc/loki/local-config.yaml
  #   networks:
  #     - monitoring-network
  #   restart: unless-stopped

  # Promtail - Log shipping to Loki
  # promtail:
  #   image: grafana/promtail:latest
  #   container_name: credit-card-promtail
  #   volumes:
  #     - ./config/promtail.yml:/etc/promtail/config.yml:ro
  #     - ./logs:/var/log/credit-card-processor:ro
  #     - /var/log:/var/log:ro
  #   command: -config.file=/etc/promtail/config.yml
  #   networks:
  #     - monitoring-network
  #   depends_on:
  #     - loki
  #   restart: unless-stopped

networks:
  # Reuse the main application network
  credit-card-network:
    external: true
    name: credit-card-prod-network
  
  # Dedicated monitoring network
  monitoring-network:
    driver: bridge
    name: credit-card-monitoring-network

volumes:
  prometheus_data:
    driver: local
    name: credit-card-prometheus-data
  
  grafana_data:
    driver: local
    name: credit-card-grafana-data
  
  alertmanager_data:
    driver: local
    name: credit-card-alertmanager-data
  
  fluentd_data:
    driver: local
    name: credit-card-fluentd-data
  
  # loki_data:
  #   driver: local
  #   name: credit-card-loki-data