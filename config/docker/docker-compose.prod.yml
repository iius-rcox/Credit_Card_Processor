# Credit Card Processor - Production Docker Compose Configuration with nginx
# 
# SECURITY NOTES:
# - This configuration includes nginx reverse proxy with SSL termination
# - Use proper secrets management for production secrets
# - Configure proper SSL certificates before deployment
# - Set up monitoring and logging for production use
# - Validate environment variables with scripts/validate-env.sh

services:
  # nginx reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: credit-card-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # nginx configuration
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      
      # SSL certificates (generate with scripts/generate-ssl-dev.sh for development)
      - ./nginx/ssl:/etc/nginx/ssl:ro
      
      # nginx logs
      - ./nginx/logs:/var/log/nginx:cached
    env_file:
      - .env.production
    networks:
      - credit-card-network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    # Resource limits for nginx
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 64M
        reservations:
          cpus: '0.1'
          memory: 32M

  # Backend service - FastAPI production
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: credit-card-backend-prod
    expose:
      - "8001"  # Internal port, not published externally
    volumes:
      # Persistent data storage only
      - backend_data:/app/data:cached
      - backend_logs:/app/logs:cached
    env_file:
      - .env.production
    environment:
      # Production environment settings
      - ENVIRONMENT=production
      - DATABASE_URL=sqlite:///./data/database.db
      - LOG_LEVEL=info
      
      # Security environment variables (loaded from .env.production file)
      - ADMIN_USERS=${ADMIN_USERS:-admin}
      - SESSION_SECRET_KEY=${SESSION_SECRET_KEY}
      - SESSION_TIMEOUT_MINUTES=${SESSION_TIMEOUT_MINUTES:-60}
      - MAX_LOGIN_ATTEMPTS=${MAX_LOGIN_ATTEMPTS:-3}
      - LOGIN_LOCKOUT_MINUTES=${LOGIN_LOCKOUT_MINUTES:-30}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - TRUSTED_HOSTS=${TRUSTED_HOSTS}
      - ENABLE_SECURITY_HEADERS=${ENABLE_SECURITY_HEADERS:-true}
      - FORCE_HTTPS=${FORCE_HTTPS:-true}
      - HSTS_MAX_AGE=${HSTS_MAX_AGE:-31536000}
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS:-50}
      - RATE_LIMIT_PERIOD=${RATE_LIMIT_PERIOD:-60}
      
      # Production optimizations
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - WORKERS=${BACKEND_WORKERS:-2}
    networks:
      - credit-card-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '${BACKEND_CPU_LIMIT:-1.0}'
          memory: ${BACKEND_MEMORY_LIMIT:-512M}
        reservations:
          cpus: '0.5'
          memory: 256M

  # Frontend service - nginx with built static assets
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: credit-card-frontend-prod
    expose:
      - "3000"  # Internal port, not published externally
    environment:
      - NODE_ENV=production
    networks:
      - credit-card-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '${FRONTEND_CPU_LIMIT:-0.5}'
          memory: ${FRONTEND_MEMORY_LIMIT:-128M}
        reservations:
          cpus: '0.25'
          memory: 64M

  # Redis cache (optional - uncomment if needed)
  # redis:
  #   image: redis:7-alpine
  #   container_name: credit-card-redis-prod
  #   command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - credit-card-network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   restart: unless-stopped
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.25'
  #         memory: 128M

  # Database backup service (optional)
  # backup:
  #   image: alpine:latest
  #   container_name: credit-card-backup-prod
  #   volumes:
  #     - backend_data:/data:ro
  #     - ./backups:/backups
  #   environment:
  #     - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
  #     - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
  #   command: >
  #     sh -c "
  #       apk add --no-cache dcron sqlite &&
  #       echo '$BACKUP_SCHEDULE cd /data && sqlite3 database.db \".backup /backups/backup-\$(date +%Y%m%d-%H%M%S).db\"' | crontab - &&
  #       crond -f
  #     "
  #   restart: unless-stopped
  #   networks:
  #     - credit-card-network

networks:
  credit-card-network:
    driver: bridge
    name: credit-card-prod-network
    driver_opts:
      com.docker.network.bridge.name: cc-prod-br0

# Production volumes for data persistence
volumes:
  backend_data:
    driver: local
    name: credit-card-backend-data-prod
    driver_opts:
      type: none
      o: bind
      device: ./data/production/backend

  backend_logs:
    driver: local
    name: credit-card-backend-logs-prod
    driver_opts:
      type: none
      o: bind
      device: ./logs/production/backend

  # redis_data:
  #   driver: local
  #   name: credit-card-redis-data-prod