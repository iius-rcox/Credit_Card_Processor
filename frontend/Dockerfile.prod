# Frontend Production Dockerfile
# Multi-stage build for optimized production image

FROM node:18-slim as builder

# Accept build arguments
ARG VITE_API_BASE_URL
ARG VITE_APP_TITLE
ARG VITE_DEV_USER

# Set environment variables for build stage - need dev deps for building
ENV NODE_ENV=development
ENV VITE_API_BASE_URL=${VITE_API_BASE_URL}
ENV VITE_APP_TITLE=${VITE_APP_TITLE}
ENV VITE_DEV_USER=${VITE_DEV_USER}

# Install build dependencies
RUN apt-get update && apt-get install -y python3 make g++ && rm -rf /var/lib/apt/lists/*

# Create application directory
WORKDIR /app

# Copy package files 
COPY package*.json ./
# Work around npm bug with rollup optional dependencies
RUN rm -rf package-lock.json node_modules && \
    npm install --silent && \
    npm cache clean --force

# Copy configuration files
COPY vite.config.js ./
COPY tailwind.config.js ./
COPY postcss.config.js ./
COPY index.html ./

# Copy source code
COPY src/ ./src/
RUN mkdir -p public

# Build the application
RUN npm run build

# Production stage with nginx
FROM nginx:alpine

# Copy custom nginx configuration
COPY <<EOF /etc/nginx/conf.d/default.conf
server {
    listen 80;
    server_name localhost;
    
    # Allow large file uploads (300GB for receipts)
    client_max_body_size 300G;

    # Compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_min_length 1000;
    
    # Security headers
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block";
    
    # Proxy API calls to backend
    location /api/ {
        proxy_pass http://backend:8001/api/;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        
        # Windows Authentication Headers
        proxy_set_header X-Forwarded-User \$remote_user;
        proxy_set_header X-Dev-User "rcox";  # Development override
        proxy_set_header Authorization \$http_authorization;
        proxy_set_header X-Remote-User \$remote_user;
        
        # Pass through Windows Auth headers if present
        proxy_set_header X-MS-CLIENT-PRINCIPAL-NAME \$http_x_ms_client_principal_name;
        proxy_set_header X-MS-CLIENT-PRINCIPAL-ID \$http_x_ms_client_principal_id;
        
        proxy_read_timeout 300s;
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        client_max_body_size 300G;
    }
    
    location / {
        root /usr/share/nginx/html;
        try_files \$uri \$uri/ /index.html;
        
        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}
EOF

# Copy built application from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Create non-root user (nginx user already exists, so skip if exists)
RUN addgroup -g 1001 -S nginx 2>/dev/null || true && \
    adduser -S nginx -u 1001 -G nginx 2>/dev/null || true

# Change ownership of nginx directories
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/run/nginx.pid

USER nginx

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]