name: Test Automation Suite

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test-automation:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        test-suite: [
          'authentication',
          'happy-path', 
          'file-upload',
          'session-management',
          'error-handling',
          'performance'
        ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Install Playwright browsers
      run: |
        cd frontend
        npx playwright install chromium
    
    - name: Set up Docker
      uses: docker/setup-buildx-action@v3
    
    - name: Build and start services
      run: |
        # Start backend service
        cd backend
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8001 &
        
        # Wait for backend to start
        sleep 10
        
        # Start frontend service
        cd ../frontend
        npm run dev &
        
        # Wait for services to be ready
        sleep 15
    
    - name: Run health checks
      run: |
        # Check backend health
        curl -f http://localhost:8001/api/health || exit 1
        
        # Check frontend
        curl -f http://localhost:3000 || exit 1
    
    - name: Run test suite - ${{ matrix.test-suite }}
      run: |
        case "${{ matrix.test-suite }}" in
          authentication)
            npx playwright test tests/e2e/auth/ --reporter=github
            ;;
          happy-path)
            npx playwright test tests/e2e/happy-path.spec.js --reporter=github
            ;;
          file-upload)
            npx playwright test tests/e2e/upload/ --reporter=github
            ;;
          session-management)
            npx playwright test tests/e2e/processing/ --reporter=github
            ;;
          error-handling)
            npx playwright test tests/e2e/error-handling.spec.js --reporter=github
            ;;
          performance)
            npx playwright test tests/performance/ --reporter=github
            ;;
        esac
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test-suite }}-node${{ matrix.node-version }}
        path: |
          test-results/
          playwright-report/
    
    - name: Upload test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports-${{ matrix.test-suite }}-node${{ matrix.node-version }}
        path: test-reports/

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  integration-test:
    runs-on: ubuntu-latest
    needs: [test-automation]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        npx playwright install
    
    - name: Run full integration test
      run: |
        # This would run the comprehensive test automation script
        chmod +x scripts/run-tests.sh
        ./scripts/run-tests.sh
    
    - name: Generate test summary
      if: always()
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f test-reports/test-summary-*.md ]; then
          cat test-reports/test-summary-*.md >> $GITHUB_STEP_SUMMARY
        else
          echo "Test summary not found" >> $GITHUB_STEP_SUMMARY
        fi

  performance-benchmark:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        npx playwright install
    
    - name: Run performance benchmarks
      run: |
        npx playwright test tests/performance/ --reporter=github
    
    - name: Store performance results
      uses: benchmark-action/github-action-benchmark@v1
      if: always()
      with:
        name: Playwright Performance
        tool: 'customSmallerIsBetter'
        output-file-path: test-results/performance-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '200%'
        fail-on-alert: true